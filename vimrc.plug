
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'json', 'nginx', 'golang', 'ruby', 'less', 'php', 'coffeescript', 'shell']
    let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta']
endif

call plug#begin('~/.vim/plug')

Plug 'editorconfig/editorconfig-vim'
Plug 'dense-analysis/ale'
let g:ale_linters = {
      \ 'python': ['pyflakes', 'pep8', 'pylint']
      \}
      " \ 'python': ['pylint']
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⁉️'

"在vim自带的状态栏中整合ale

" let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']

"显示Linter名称,出错或警告等相关信息

let g:ale_echo_msg_error_str = 'Error'

let g:ale_echo_msg_warning_str = 'Warning'

let g:ale_echo_msg_format = '[%linter% - %severity%] %s '

" nmap sp (ale_previous_wrap)
" nmap sn (ale_next_wrap)
nmap <silent> <Leader>h <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)
" nmap <silent> sn <Plug>(ale_next_wrap)

      " \ 'python': ['pylint', 'pyflakes', 'pep8']
      " \ 'cpp': ['cppcheck'],
      " \ 'c': ['cppcheck'],
" Plug 'nvie/vim-flake8'

" terminal {{{
  " Plug 'PangPangPangPangPang/vim-terminal'
    " map <silent> <F12> :VSTerminalToggle<cr>
    " if has('nvim')
        " tnoremap <F12> <C-\><C-n> :VSTerminalToggle<cr>
        " tnoremap <C-w> <C-\><C-n><C-w>
    " else
        " tmap <silent> <F12> <c-w>:VSTerminalToggle<cr>
    " endif
    " let g:vs_terminal_custom_height = 10
" }}}

" " syntastic {{{
  " Plug 'scrooloose/syntastic'
    " " dependence
    " " 1. shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

    " let g:syntastic_error_symbol='>>'
    " let g:syntastic_warning_symbol='>'
    " let g:syntastic_check_on_open=1
    " let g:syntastic_check_on_wq=0
    " let g:syntastic_enable_highlighting=1

    " " checkers
    " " 最轻量
    " " let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes
    " " 中等
    " " error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
    " let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
    " let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'
    " " 重量级, 但是足够强大, 定制完成后相当个性化
    " " pylint codes: http://pylint-messages.wikidot.com/all-codes
    " " let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
    " " let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
    " " let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

    " " if js
    " " let g:syntastic_javascript_checkers = ['jsl', 'jshint']
    " " let g:syntastic_html_checkers=['tidy', 'jshint']

    " " to see error location list
    " let g:syntastic_always_populate_loc_list = 1
    " let g:syntastic_enable_signs = 1
    " let g:syntastic_auto_loc_list = 0
    " let g:syntastic_auto_jump = 0
    " let g:syntastic_loc_list_height = 5
    " let g:syntastic_filetype_map = { "tex": "" }

    " function! ToggleErrors()
        " let old_last_winnr = winnr('$')
        " lclose
        " if old_last_winnr == winnr('$')
            " " Nothing was closed, open syntastic_error location panel
            " Errors
        " endif
    " endfunction
    " nnoremap <Leader>s :call ToggleErrors()<cr>

    " " ,en ,ep to jump between errors
    " function! <SID>LocationPrevious()
    " try
        " lprev
    " catch /^Vim\%((\a\+)\)\=:E553/
        " llast
    " endtry
    " endfunction

    " function! <SID>LocationNext()
    " try
        " lnext
    " catch /^Vim\%((\a\+)\)\=:E553/
        " lfirst
    " endtry
    " endfunction

    " nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
    " nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
    " nmap <silent> <Leader>ep    <Plug>LocationPrevious
    " nmap <silent> <Leader>en    <Plug>LocationNext

    " " 修改高亮的背景色, 适应主题
    " highlight SyntasticErrorSign guifg=white guibg=black

    " " 禁止插件检查java
    " " thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
    " let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }

    " " 关闭syntastic语法检查, 鼠标复制代码时用到, 防止把错误标志给复制了
    " nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
" " }}}


" nerdtree nerdtreetabs {{{
  Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'


    " nerdtreetabs
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " 关闭同步
    let g:nerdtree_tabs_synchronize_view=0
    let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}


" airline {{{
  " 状态栏增强展示
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
    let g:airline_powerline_fonts = 0
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'

    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
    " ▶ ┃ ║ ┇ ┆
    " let g:airline#extensions#tabline#left_sep = '▶'
    let g:airline#extensions#tabline#left_alt_sep = '┃'
    " let g:airline#extensions#tabline#right_sep = '◀'
    " let g:airline#extensions#tabline#right_alt_sep = '❮'
    let g:airline#extensions#tabline#show_splits = 1
    let g:airline#extensions#tabline#show_tabs = 1
    let g:airline#extensions#tabline#excludes = ['ZSH_BIN']
    let g:airline#extensions#tabline#exclude_preview = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " let g:airline#extensions#tabline#buffer_idx_format = {
          " \ '0': '[0] ',
          " \ '1': '[1] ',
          " \ '2': '[2] ',
          " \ '3': '[3] ',
          " \ '4': '[4] ',
          " \ '5': '[5] ',
          " \ '6': '[6] ',
          " \ '7': '[7] ',
          " \ '8': '[8] ',
          " \ '9': '[9] '
          " \}
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
    nmap <left> <Plug>AirlineSelectPrevTab
    nmap <right> <Plug>AirlineSelectNextTab
    nmap <C-u> <Plug>AirlineSelectPrevTab
    nmap <C-i> <Plug>AirlineSelectNextTab

    " let g:airline_theme='deus'
" }}}


" 快速注释
" nerdcommenter {{{
  Plug 'scrooloose/nerdcommenter'
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" 自动补全单引号，双引号等
" delimitMate {{{
  Plug 'Raimondi/delimitMate'
    " for python docstring ",优化输入
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
" }}}


" 括号显示增强
" rainbow_parentheses {{{
  Plug 'kien/rainbow_parentheses.vim'
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}



if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    " Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

    " isort  https://github.com/timothycrosley/isort#readme + https://github.com/fisadev/vim-isort#installation
    " pip install isort
    " Plug 'fisadev/vim-isort'
    " Shift-V 上下选中, ctrl + i 规范化
    " let g:vim_isort_map = '<C-i>'
endif

call plug#end()
