
call plug#begin('~/.vim/plug')

"==========================================
" repeat
"==========================================
Plug 'tpope/vim-repeat'

"==========================================
" goyo
"==========================================
Plug 'junegunn/goyo.vim'
  map <silent> <Leader>g :Goyo<CR>

"==========================================
" visual multi
"==========================================
Plug 'mg979/vim-visual-multi'
  let g:VM_maps = {}
  let g:VM_maps['Find Under']         = '<C-n>'
  let g:VM_maps['Find Subword Under'] = '<C-n>'
  let g:VM_maps["Select Cursor Down"] = '<C-v>'


"==========================================
" tree 
"==========================================
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
  " map <leader>n :NERDTreeToggle<CR>
  let NERDTreeHighlightCursorline=1
  let NERDTreeIgnore=[ 
    \ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '\.egg-info$[[dir]]',
    \ '^\.vscode$[[dir]]', '^\.git$[[dir]]', '^\.svn$[[dir]]', '^\.hg$[[dir]]', 
    \ '^\.idea$[[dir]]', '^\.vscode$[[dir]]', '^\.DS_Store$',
    \ ]
  "close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
  " s/v 分屏打开文件
  let g:NERDTreeMapOpenSplit = 's'
  let g:NERDTreeMapOpenVSplit = 'v'


  " nerdtreetabs
  map tt <plug>NERDTreeTabsToggle<CR>
  " 关闭同步
  let g:nerdtree_tabs_synchronize_view=1
  let g:nerdtree_tabs_synchronize_focus=1
  " 是否自动开启nerdtree
  " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
  let g:nerdtree_tabs_open_on_console_startup=0
  let g:nerdtree_tabs_open_on_gui_startup=0

  " 隐藏不必要文件
  let NERDTreeRespectWildIgnore=1
  nmap T :NERDTreeFind<CR>

"==========================================
" airline
"==========================================
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  let g:airline_powerline_fonts = 0
  if !exists('g:airline_symbols')
      let g:airline_symbols = {}
  endif
  let g:airline_left_sep = '▶'
  let g:airline_left_alt_sep = '❯'
  let g:airline_right_sep = '◀'
  let g:airline_right_alt_sep = '❮'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.branch = '⎇'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_alt_sep = '┃'
  let g:airline#extensions#tabline#show_splits = 1
  let g:airline#extensions#tabline#show_tabs = 1
  let g:airline#extensions#tabline#excludes = ['ZSH_BIN']
  let g:airline#extensions#tabline#exclude_preview = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
  nmap <leader>0 <Plug>AirlineSelectTab1 <Plug>AirlineSelectPrevTab
  nmap <left> <Plug>AirlineSelectPrevTab
  nmap <right> <Plug>AirlineSelectNextTab
  nmap <C-u> <Plug>AirlineSelectPrevTab
  nmap <C-i> <Plug>AirlineSelectNextTab
  function! CloseBuffer()
    let l:bl = airline#extensions#tabline#buflist#list()
    let l:n = len(l:bl)
    if l:n <= 1
      bwipe
      q
    else
      let l:idx = bufnr('%')
      let l:bi = index(l:bl, l:idx)
      if l:bi == 0
        exec 'b!' . l:bl[(l:bi + 1) % len(l:bl)]
      else
        exec 'b!' . l:bl[(l:bi - 1) % len(l:bl)]
      endif
      exec "bwipe ".l:idx
    endif
  endfunction
  nnoremap <silent> <leader>q :call CloseBuffer()<CR>


"==========================================
" comment
"==========================================

Plug 'scrooloose/nerdcommenter'
  let g:NERDSpaceDelims=1
  let g:NERDAltDelims_python = 1


"==========================================
" python
"==========================================
Plug 'hdima/python-syntax'
Plug 'hynek/vim-python-pep8-indent'

"==========================================
" js
"==========================================
Plug 'MaxMEllon/vim-jsx-pretty'
" Plug 'pangloss/vim-javascript'
" Plug 'neoclide/vim-jsx-improve'
" let g:jsx_improve_javascriptreact = 1



"==========================================
" surround
"==========================================
Plug 'tpope/vim-surround'

Plug 'terryma/vim-expand-region'
  map <CR> <Plug>(expand_region_expand)
  vmap - <Plug>(expand_region_shrink)
  " let g:expand_reion_text_objects = {
      " \ 'iw'  :0,
      " \ 'iW'  :0,
      " \ 'i"'  :0,
      " \ 'i''' :0,
      " \ 'i]'  :1,
      " \ 'ib'  :1,
      " \ 'iB'  :1,
      " \ 'il'  :0,
      " \ 'ip'  :0,
      " \ 'ie'  :0,
      " \ }

Plug 'Raimondi/delimitMate'
  au FileType python let b:delimitMate_nesting_quotes = ['"']
  au FileType php let delimitMate_matchpairs = "(:),[:],{:}"

Plug 'kien/rainbow_parentheses.vim'
  " 不加入这行, 防止黑色括号出现, 很难识别
  " \ ['black',       'SeaGreen3'],
  let g:rbpt_colorpairs = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['brown',       'firebrick3'],
      \ ['gray',        'RoyalBlue3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]
  let g:rbpt_max = 16
  let g:rbpt_loadcmd_toggle = 0
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces

"==========================================
" check
"==========================================
Plug 'dense-analysis/ale'

let g:ale_linters = {
      \ 'python': ['pyflakes', 'pep8', 'pylint']
      \}
      " \ 'python': ['pylint']
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⁉️'

"在vim自带的状态栏中整合ale

" let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_virtualtext_cursor = 'disabled'

"显示Linter名称,出错或警告等相关信息

let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter% - %severity%] %s '

" nmap sp (ale_previous_wrap)
" nmap sn (ale_next_wrap)
nmap <silent> <Leader>h <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)

"==========================================
" file ranger
"==========================================
Plug 'francoiscabrol/ranger.vim'
" nmap <silent> F :Ranger<CR>

"==========================================
" chatgpt
"==========================================
" Plug 'dense-analysis/neural', { 'branch': 'main' }
" Plug 'muniftanjim/nui.nvim', { 'branch': 'main' }
" Plug 'elpiloto/significant.nvim', { 'branch': 'main' }
" let g:neural = {
" \   'selected': "chatgpt",
" \   'source': {
" \       'chatgpt': {
" \           'api_key': "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",
" \       },
" \   },
" \}
" nmap oo :Neural


"==========================================
" fzf
"==========================================
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
function! s:getVisualSelection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)

    if len(lines) == 0
        return ""
    endif

    let lines[-1] = lines[-1][:column_end - (&selection == "inclusive" ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]

    return join(lines, "\n")
endfunction
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nmap <silent> F :FZF<CR>
vnoremap <silent> F <Esc>:FZF -q <C-R>=<SID>getVisualSelection()<CR><CR>

let g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.6, 'relative': v:true } }

"==========================================
" ack ag
"==========================================
Plug 'mileszs/ack.vim'
" let g:ackprg = 'ag --vimgrep'
let g:ackprg = 'ag --nogroup --nocolor --column'


call plug#end()
